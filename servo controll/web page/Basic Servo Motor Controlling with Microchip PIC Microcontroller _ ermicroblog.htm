<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta name="verify-v1" content="/EzWYltsvBs9+FvRIZCSc9Oc36JbcUrGBtq5lNHfWyU=">
<link rel="stylesheet" type="text/css" href="Basic%20Servo%20Motor%20Controlling%20with%20Microchip%20PIC%20Microcontroller%20_%20ermicroblog_files/style.css">
<link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://www.ermicro.com/blog/?feed=rss2">
<link rel="alternate" type="text/xml" title="RSS .92" href="http://www.ermicro.com/blog/?feed=rss">
<link rel="alternate" type="application/atom+xml" title="Atom 0.3" href="http://www.ermicro.com/blog/?feed=atom">
<link rel="pingback" href="http://www.ermicro.com/blog/xmlrpc.php">
<link rel="icon" href="http://www.ermicro.com/blog/favicon.ico" type="image/x-icon">
<link rel="shortcut icon" href="http://www.ermicro.com/blog/favicon.ico" type="image/x-icon">

<title>Basic Servo Motor Controlling with Microchip PIC Microcontroller | ermicroblog</title>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.ermicro.com/blog/xmlrpc.php?rsd">
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://www.ermicro.com/blog/wp-includes/wlwmanifest.xml"> 
<meta name="generator" content="WordPress 2.6.3">


<!-- all in one seo pack 1.4.6.15 [1039,1181] -->
<meta name="description" content="The servo motor is widely used in model hobbyist such as airplane R/C model for moving the rudder, ailerons, elevators and acceleration control or in the car">
<meta name="keywords" content="adc,hitec-picc,ldr,pic,pic16f690,pickit2,pwm,robotics,servo">
<!-- /all in one seo pack -->
	<link rel="stylesheet" type="text/css" media="screen" href="Basic%20Servo%20Motor%20Controlling%20with%20Microchip%20PIC%20Microcontroller%20_%20ermicroblog_files/wp-contactform-iii.css">


<!-- Start Of Script Generated By WP-PageNavi 2.31 -->
<link rel="stylesheet" href="Basic%20Servo%20Motor%20Controlling%20with%20Microchip%20PIC%20Microcontroller%20_%20ermicroblog_files/pagenavi-css.css" type="text/css" media="screen">
<!-- End Of Script Generated By WP-PageNavi 2.31 -->
</head>

<body>

<div id="wrap">
<div id="header">
    <div id="headerimg">
		<h1><a href="http://www.ermicro.com/blog/"><span style="color:#8080ff">ermicroblog</span></a></h1>
		<div class="description">Microcontrollers and Electronics Project Blog</div>
	</div>
</div>
<div id="menu">
<ul>
<li class="page_item current_page_item"><a href="http://www.ermicro.com/blog">Home</a></li>
<li class="page_item page-item-2"><a href="http://www.ermicro.com/blog/?page_id=2" title="About">About</a></li>
<li class="page_item page-item-809"><a href="http://www.ermicro.com/blog/?page_id=809" title="Copyright and Disclaimer">Copyright and Disclaimer</a></li>
<li class="page_item page-item-419"><a href="http://www.ermicro.com/blog/?page_id=419" title="Contact Us">Contact Us</a></li>
</ul>
</div><div id="content_wrap">
<div id="content">

<h1><span style="color:#0060FA">Blog Entry</span></h1>

<!-- Start Google Unit Adsense  -->
<br>
<script type="text/javascript"><!--
google_ad_client = "pub-9787882570656893";
/* 468x15, created 3/13/09 */
google_ad_slot = "5525125550";
google_ad_width = 468;
google_ad_height = 15;
//-->
</script>
<script type="text/javascript" src="Basic%20Servo%20Motor%20Controlling%20with%20Microchip%20PIC%20Microcontroller%20_%20ermicroblog_files/show_ads.js">
</script><ins style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:468px"><ins id="aswift_0_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:468px"><iframe allowtransparency="true" hspace="0" marginwidth="0" marginheight="0" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){i+='.call';setTimeout(h,0)}else if(h.match){i+='.nav';w.location.replace(h)}s.log&amp;&amp;s.log.push(i)}" vspace="0" id="aswift_0" name="aswift_0" style="left: 0pt; position: absolute; top: 0pt;" scrolling="no" frameborder="0" height="15" width="468"></iframe></ins></ins>

<br><br>
<!-- End Google Unit Adsense  -->


<h2 class="title"><a href="http://www.ermicro.com/blog/?p=771" rel="bookmark" title="Basic Servo Motor Controlling with Microchip PIC Microcontroller">Basic Servo Motor Controlling with Microchip PIC Microcontroller</a></h2>
<h4>February 17, 2009 by <a href="http://www.ermicro.com/blog/?author=2" title="Posts by rwb">rwb</a>, under <a href="http://www.ermicro.com/blog/?cat=42" title="View all posts in Robotics" rel="category">Robotics</a>.</h4>
<br>

<!-- Start Google Adsense  -->
<br>

<script type="text/javascript"><!--
google_ad_client = "pub-9787882570656893";
/* 468x60, created 9/28/09 */
google_ad_slot = "9374687509";
google_ad_width = 468;
google_ad_height = 60;
//-->
</script>
<script type="text/javascript" src="Basic%20Servo%20Motor%20Controlling%20with%20Microchip%20PIC%20Microcontroller%20_%20ermicroblog_files/show_ads.js">
</script><ins style="display:inline-table;border:none;height:60px;margin:0;padding:0;position:relative;visibility:visible;width:468px"><ins id="aswift_1_anchor" style="display:block;border:none;height:60px;margin:0;padding:0;position:relative;visibility:visible;width:468px"><iframe allowtransparency="true" hspace="0" marginwidth="0" marginheight="0" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){i+='.call';setTimeout(h,0)}else if(h.match){i+='.nav';w.location.replace(h)}s.log&amp;&amp;s.log.push(i)}" vspace="0" id="aswift_1" name="aswift_1" style="left: 0pt; position: absolute; top: 0pt;" scrolling="no" frameborder="0" height="60" width="468"></iframe></ins></ins>

<br>
<!-- End Google Adsense -->

<p>The servo motor is widely used in model hobbyist such as airplane R/C
 model for moving the rudder, ailerons, elevators and acceleration 
control or in the car R/C model for steering and acceleration control. 
In this tutorial we will learn how to control the servo motor as well as
 the simple close loop control algorithm for this servo motor.<span id="more-771"></span></p>
<p>The servo motor basically is a high quality geared DC motor equipped 
with electronic circuit for controlling the DC motor rotation direction 
and position. Currently there are two types of servo motor available on 
the market, the first one is called <strong>standard servo</strong> and the other one is called <strong>continues servo</strong>;
 standard servo can rotate to maximum (clockwise or counterclockwise) of
 120 to 180 degrees while continues servo can rotate up to 360 degrees 
in both direction.</p>
<p><a href="http://www.ermicro.com/blog/wp-content/uploads/2009/02/servo_00.jpg"><img class="alignnone size-full wp-image-772" title="servo_00" src="Basic%20Servo%20Motor%20Controlling%20with%20Microchip%20PIC%20Microcontroller%20_%20ermicroblog_files/servo_00.jpg" alt="" height="243" width="576"></a></p>
<p><strong>The Servo Motor</strong></p>
<p>The servo motor use PWM signal for controlling the DC motor; unlike 
normal PWM usually used in ordinary DC motor; this PWM signal is not use
 for controlling the rotation speed, instead it is use for controlling 
the motor direction or position. Most servo motor will work well on 50 
Hz of PWM frequency; this mean the PWM signal should have a period of 
20ms. The electronic circuit inside the servo motor will response to the
 PWM signal width; the 0.7ms to 1ms PWM width will make the servo motor 
to turn clockwise (CW), the 1.7ms to 2ms PWM width will make the servo 
motor to turn counterclockwise (CCW). For the standard servo the 1.5ms 
PWM width will turn the servo motor to its center.</p>
<p><a href="http://www.ermicro.com/blog/wp-content/uploads/2009/02/servo_01.jpg"><img class="alignnone size-full wp-image-773" title="servo_01" src="Basic%20Servo%20Motor%20Controlling%20with%20Microchip%20PIC%20Microcontroller%20_%20ermicroblog_files/servo_01.jpg" alt="" height="351" width="568"></a></p>
<p>The exact PWM width is depend on the servo motor types and brands; on
 this tutorial we will use the Parallax Continues Servo which using 1ms 
and 2ms respectively. The Parallax servo motor consists of three wires 
colored with White, Red and Black. The Red and Black wires go to the Vcc
 and Gnd, while the White wire is use to feed the PWM signal from the 
PIC 16F690 microcontroller I/O port.</p>
<p>Driving the servo motor using PIC 16F690 microcontroller might be 
simple as you thing at the first time; we just use the PIC PWM 
peripheral to do the job (you could learn of how to use the PIC PWM 
peripheral on the article <a title="H-Bridge Microchip PIC Microcontroller PWM Motor Controller" href="http://www.ermicro.com/blog/?p=706" target="_blank">H-Bridge Microchip PIC Microcontroller PWM Motor Controller</a>
 posted on this blog), but looking at the PIC 16F690 datasheet with the 8
 Mhz of internal frequency clock (use in this tutorial) and using 
maximum prescaler of 16 (TIMER2) the minimum PWM frequency we could 
achieve can be calculated using this formula:</p>
<p><strong>PWM period = [( PR2 + 1) ] x 4 x Tosc x (TMR2 prescaler value) second</strong></p>
<p>Using maximum <strong>PR2</strong> register value of <strong>0xFF</strong> (255 decimal), we will get this result:</p>
<p>PWM period = (255 + 1) x 4 x (1 / 8000000) x 16= <strong>0.002048 second</strong><br>
PWM frequency = 1 / PWM period = 1 / 0.002048 = <strong>488.28 Hz</strong></p>
<p>The 488.28 Hz frequency is still too high from the servo motor 
working frequency of 50Hz; therefore this leads us to these three 
methods bellow:</p>
<ul>
<li>Keep using the PIC PWM peripheral and lower the operation frequency by setting the <strong>OSCCON</strong> register and <strong>PR2</strong>
 register until it meets the servo motor frequency requirement. This 
approach will secrify the program execution speed as we will operate the
 PIC Microcontroller with the 500 khz clock speed, so we simply not 
choose it.</li>
</ul>
<ul>
<li>Secondly, we create our own PWM function to mimic the PWM signal as 
follow: turn on the PORT, make some 2 ms delay, turn off the PORT, and 
make some 18 ms delay and so forth. This approach is what I called a 
dirty method which is not the efficient way to do it, so we just drop 
this method.</li>
</ul>
<ul>
<li>The third approach is to use the PIC 16F690 microcontroller TIMER0 
with the interrupt to actually generate the PWM signal as the TIMER0 
have wider prescaler to choose comparing to the TIMER2, but 
unfortunately the PWM peripheral on the PIC 16F690 only work with TIMER2
 not TIMER0. Therefore we will make this TIMER0 as our PWM base 
generator for driving the servo motor on this tutorial. The principal we
 learn here could be applied to the other type of PIC Microcontroller or
 AVR Microcontroller as well.</li>
</ul>
<p>Instead of just demonstrating the servo motor to rotate clockwise and
 counterclockwise, I decide to make it more challenging and attractive 
by putting the LDR (light dependent resistor) as the light sensor to our
 servo motor and make this servo motor to behave as the light seeking 
machine; …hey this sound like we are touching the robotics field; …hmm 
yes isn’t it cool, as we know most of the embedded robotics hobbyist 
widely use the servo motor for robot’s arms, walkers robots, light 
seeking robot (know also as photovore robot) and many more.</p>
<p><a href="http://www.ermicro.com/blog/wp-content/uploads/2009/02/servo_02.jpg"><img class="alignnone size-full wp-image-776" title="servo_02" src="Basic%20Servo%20Motor%20Controlling%20with%20Microchip%20PIC%20Microcontroller%20_%20ermicroblog_files/servo_02.jpg" alt="" height="363" width="573"></a></p>
<p><strong>The LDR (Light Dependent Resistor)</strong></p>
<p>By just looking at the name, is clear that this is the type of 
resistor that its resistance depends on the light intensity; it’s also 
called photoresistor, made from the Cadmium Sulfide (CdS) one of the 
semiconductor material. The LDR will response to light it received, the 
brightest the light the smaller its resistance and vise versa; on the 
complete darkness the LDR resistance will become very high (about 150K 
Ohm; for the LDRs I use in this tutorial)</p>
<p>From the above circuit diagram we connect serially the LDR with the 
10K trimport and use it as the voltage divider circuit to the PIC 16F690
 analog input <strong>AN4</strong> and <strong>AN5</strong> (you could learn about <a title="Basic Resistor Circuit" href="http://www.ermicro.com/blog/?p=104" target="_blank">Basic Resistor Circuit</a>
 posted in this blog); therefore the variation on the light intensity 
received by the LDR will result on the variation of the voltage level to
 the PIC analog input port. Because of the LDR resistance vary widely 
among the types and brands, therefore we use the trimport and I suggest 
that you preset it to about 5 K Ohm on the first time and later on you 
can adjust it as needed.</p>
<p><a href="http://www.ermicro.com/blog/wp-content/uploads/2009/02/servo_03.jpg"><img class="alignnone size-full wp-image-777" title="servo_03" src="Basic%20Servo%20Motor%20Controlling%20with%20Microchip%20PIC%20Microcontroller%20_%20ermicroblog_files/servo_03.jpg" alt="" height="270" width="565"></a></p>
<p>The LDR pairs will be functioned as the light sensor that controlled 
the servo motor position toward the light source; therefore to get the 
maximum performance we put these two LDRs inside the paper tube in such a
 way that their position is about 45 degrees away from the light source 
center (see the top view picture above).</p>
<p><strong>The Light Seeking Head Construction</strong></p>
<p>One of my favorite construction material is to use a thick paper 
(…yes it’s a paper) for fast prototyping as its easy to cut, bend, light
 weight and quiet strong; our seeking light head project use just a 
thick paper to demonstrate the servo motor concept or what we usually 
called it as the proof of concept (POC); so let’s do the cut and paste; 
and of course you could experiment with any kind of head forms or faces 
as you like and these following pictures can be use as the starter.</p>
<p><a href="http://www.ermicro.com/blog/wp-content/uploads/2009/02/servo_04.jpg"><img class="alignnone size-full wp-image-778" title="servo_04" src="Basic%20Servo%20Motor%20Controlling%20with%20Microchip%20PIC%20Microcontroller%20_%20ermicroblog_files/servo_04.jpg" alt="" height="216" width="586"></a></p>
<p>The following is the list of hardware and software used in this tutorial:</p>
<p>1.	Thick paper, scissor, glue, duct tape and spray paint for our light seeking head<br>
2.	One continues servo motor (in this project I’am using Parallax continues servo)<br>
3.	Two LDR<br>
4.	Two Trimport 10K<br>
5.	PICJazz 16F690 learning board from ermicro (the <a title="PICJazz 20PIN Board" href="http://www.ermicro.com/blog/?p=15" target="_blank">schema</a>)<br>
6.	JazzMate 2576-5V power board, the 5 volt switching power supply<br>
7.	Microchip PICKit2 Programmer<br>
8.	Microchip MPLAB IDE v8.0 or higher<br>
9.	HITEC PICC-Lite PICC-Lite Version 9.60PL1</p>
<p>Now let’s take a look at the C code that makes this thing happen:</p>
<pre>// ***************************************************************************
//  File Name    : servo.c
//  Version      : 1.0
//  Description  : Servo Motor Controller
//                 Using TIMER0 for Generating Servo PWM
//  Author       : RWB
//  Target       : PICJazz 16F690 Board
//  Compiler     : HITECT PICC-Lite Version 9.60PL1
//  IDE          : Microchip MPLAB IDE v8.00
//  Programmer   : PICKit2
//  Last Updated : 03 Jan 2009
// ***************************************************************************
#include &lt;pic.h&gt;</pre>
<pre>/*   PIC Configuration Bit:
**   INTIO     - Using Internal RC No Clock
**   WDTDIS    - Wacthdog Timer Disable
**   PWRTEN    - Power Up Timer Enable
**   MCLREN    - Master Clear Enable
**   UNPROTECT - Code Un-Protect
**   UNPROTECT - Data EEPROM Read Un-Protect
**   BORDIS    - Borwn Out Detect Disable
**   IESODIS   - Internal External Switch Over Mode Disable
**   FCMDIS    - Monitor Clock Fail Safe Disable
*/
__CONFIG(INTIO &amp; WDTDIS &amp; PWRTEN &amp; MCLREN &amp; UNPROTECT \
  &amp; UNPROTECT &amp; BORDIS &amp; IESODIS &amp; FCMDIS);</pre>
<pre>// Using Internal Clock of 8 Mhz
#define FOSC 8000000L</pre>
<pre>// Servo definition and variables
#define MAX_VALUE 200
#define CCW_ROTATION MAX_VALUE - 20
#define CW_ROTATION MAX_VALUE - 10
#define STOP_ROTATION MAX_VALUE
#define THRESHOLD_VALUE 50</pre>
<pre>unsigned char pulse_max=0;
unsigned char pulse_top=0;
unsigned char top_value = 0;</pre>
<pre>static void interrupt isr(void)
{
  if(T0IF) {	            // TIMER0 Interrupt Flag
    pulse_max++;            // Pulse Max Increment
    pulse_top++;            // Pulse Top Increment

    /* MAX_VALUE=200 turn off the pulse */
    if (pulse_max &gt;= MAX_VALUE) {
      pulse_max=0;
      pulse_top=0;
      RC2=0;                // Turn off RC2
    }

    /* top_value = MAX_VALUE - n, n=10: 10 x 0.1ms = 1.0ms, n=20: 20 x 0.1ms = 2.0ms */
    /* 2ms -&gt; CCW Rotation, 1ms -&gt; CW Rotation */
    if (pulse_top == top_value) {
      RC2=1;                // Turn On RC2
    }</pre>
<pre>    TMR0 = 156;             // Initial Value for 0.1ms Interrupt
    T0IF = 0;		    // Clear TIMER0 interrupt flag
  }
}</pre>
<pre>void main(void)
{
  unsigned char ldr_left;
  unsigned char ldr_right;
  int ldr_diff;</pre>
<pre>  OSCCON=0x70;         // Select 8 Mhz internal clock</pre>
<pre>  /* Initial Port Used */
  TRISC = 0x03;        // Set RC0 and RC1 as input others as Output
  ANSEL = 0x30;        // Set PORT AN4 and AN5 as analog input
  ANSELH = 0x00;       // Set PORT AN8 to AN11 as Digital I/O
  PORTC = 0x00;        // Turn Off all PORTC</pre>
<pre>  /* Init Servo Pulse */
  pulse_max=0;
  pulse_top=0;
  top_value = MAX_VALUE; // top_value = MAX_VALUE: Servo Motor Stop</pre>
<pre>  /* Initial ADC */
  ADCON1=0b00110000;   // Select the FRC for 8 Mhz</pre>
<pre>  /* Init TIMER0: Period: Fosc/4 x Prescaler x TMR0
     0.0005 ms x 2 * 100 = 0.1 ms */</pre>
<pre>  OPTION = 0b00000000; // 1:2 Prescaller
  TMR0=156;            // Interupt every 0.1 ms
  T0IE = 1;		       // Enable interrupt on TMR0 overflow
  GIE = 1;		       // Global interrupt enable

  for(;;) {
    /* Read the ADC here */
    ADCON0=0b00010001;       // select left justify result. ADC port channel AN4
    GODONE=1;	             // initiate conversion on the channel 4</pre>
<pre>    while(GODONE) continue;  // Wait for ldr_left conversion done
    ldr_left=ADRESH;         // Read 8 bits MSB, Ignore 2 bits LSB in ADRESL</pre>
<pre>    ADCON0=0b00010101;       // select left justify result. ADC port channel AN5
    GODONE=1;	             // initiate conversion on the channel 5</pre>
<pre>    while(GODONE) continue;  // Wait for ldr_right conversion done
    ldr_right=ADRESH;        // Read 8 bits MSB, Ignore 2 bits LSB in ADRESL

    /* Get the different */
    ldr_diff=ldr_left - ldr_right;    

    if ((ldr_diff &gt;= -THRESHOLD_VALUE) &amp;&amp; (ldr_diff &lt;= THRESHOLD_VALUE)) {
      top_value = MAX_VALUE;     // Stop the Servo Motor
    } else {
      if (ldr_diff &gt; THRESHOLD_VALUE) {
        top_value = CCW_ROTATION;  // Counterclockwise Rotation
      } else {
        top_value = CW_ROTATION;   // Clockwise Rotation
      }
    }
  }
}</pre>
<pre>/* EOF: servo.c */</pre>
<p><strong>PIC Microcontroller TIMER0 Peripheral</strong></p>
<p>The heart of the servo motor PWM pulse is rely on the PIC TIMER0 
peripheral; this TIMER0 together with the interrupt service will be used
 as our servo motor base PWM pulse generator. The TIMER0 peripheral is 
actually the 8-bit counter that always increase it count base on the 
clock pulse supply to it. The PIC microcontroller TIMER0 counter use the
 <strong>TMR0</strong> register to hold the counted number, each of the clock pulse will increase the <strong>TMR0</strong>
 register value by 1 until it reach its maximum value of 255 and start 
all over again from 0 (overflow); and when this happening the PIC TIMER0
 peripheral will rise the interrupt signal. The interrupt signal raised 
by the PIC TIMER0 peripheral will be interpreted by the microcontroller 
as this following explanation:</p>
<p>1.	Stop whatever you are doing right now<br>
2.	Save the current execution address for later used in memory; this area of memory is known as the stack area<br>
3.	Jump to the assigned TIMER0 interrupt service address<br>
4.	Start execute the code in the TIMER0 interrupt service address<br>
5.	Return back to your last task by loading the last execution address in the stack area and continue execute the code from it.</p>
<p><a href="http://www.ermicro.com/blog/wp-content/uploads/2009/02/servo_07.jpg"><img class="alignnone size-full wp-image-779" title="servo_07" src="Basic%20Servo%20Motor%20Controlling%20with%20Microchip%20PIC%20Microcontroller%20_%20ermicroblog_files/servo_07.jpg" alt="" height="317" width="577"></a></p>
<p>The principal we use here is to set the <strong>TMR0</strong> register to overflow every 0.1 ms and set our own counter variable (<strong>pulse_max</strong>)
 to count up to maximum 200; this will give us the constant 20 ms period
 which is the same as 50 Hz frequency required by our servo motor.</p>
<p><a href="http://www.ermicro.com/blog/wp-content/uploads/2009/02/servo_08.jpg"><img class="alignnone size-full wp-image-781" title="servo_08" src="Basic%20Servo%20Motor%20Controlling%20with%20Microchip%20PIC%20Microcontroller%20_%20ermicroblog_files/servo_08.jpg" alt="" height="230" width="585"></a></p>
<p>The TIMER0 period could be calculated using this formula bellow:</p>
<p><strong>TIMER0 period = [(TMR0 + 1)] x 4 x Tosc x (TIMER0 prescaler value) second</strong></p>
<p>By selecting the TIMER0 prescaler of 2; <strong>PS2</strong>=0, <strong>PS1=0</strong> and <strong>PS0=0</strong> bits in <strong>OPTION_REG</strong> register and initial the <strong>TMR0</strong> register value to <strong>156</strong>
 (99 more counts to reach its maximum value of 255) with the system 
frequency clock of 8 Mhz, the PIC microcontroller TIMER0 overflow period
 can be calculated as follow:</p>
<p>TIMER0 period = [((255 - 156) + 1)] x 4 x 1/8000000 x 2 = 0.0001 second = <strong>0.1 ms</strong></p>
<p>The following C code is used to initialize the PIC 16F690 TIMER0 peripheral:</p>
<pre>/* Init TIMER0: Period: Fosc/4 x Prescaler x TMR0
   0.0005 ms x 2 * 100 = 0.1 ms */</pre>
<pre>OPTION = 0b00000000; // 1:2 Prescaller
TMR0 = 156;          // Interupt every 0.1 ms
T0IE = 1;	     // Enable interrupt on TMR0 overflow
GIE = 1;	     // Global interrupt enable</pre>
<p>In order to generated the PWM pulse, we need to have two separate variable counter here; one is the <strong>pulse_max</strong> variable used for resetting the <strong>RC2</strong> port (logical “<strong>0</strong>“) which connected to the servo motor and secondly is the <strong>pulse_top</strong> variable used to set the <strong>RC2</strong> port; the <strong>pulse_top</strong> variable will be compared to the <strong>top_value</strong> variable; and if it equal than we will set the <strong>RC2</strong> port (logical “<strong>1</strong>“).</p>
<p><a href="http://www.ermicro.com/blog/wp-content/uploads/2009/02/servo_09.jpg"><img class="alignnone size-full wp-image-782" title="servo_09" src="Basic%20Servo%20Motor%20Controlling%20with%20Microchip%20PIC%20Microcontroller%20_%20ermicroblog_files/servo_09.jpg" alt="" height="394" width="570"></a></p>
<p>From the timing diagram above the <strong>pulse_max</strong> variable is used to hold our own PWM counter and the <strong>pulse_max</strong> value increase every 0.1ms (<strong>TMR0</strong> overflow). By the time it reaches the maximum value of 200 than we will reset the <strong>RC2</strong> port together with the <strong>pulse_max</strong> variable and the <strong>pulse_top</strong> variable. The <strong>pulse_top</strong> value also increase every 0.1 ms and its value constantly compared to the <strong>top_value</strong> variable value; when it equal we will set the <strong>RC2</strong> port (logical “<strong>1</strong>“); for example by setting the <strong>top_value</strong> variable to 190, means when the <strong>pulse_top</strong> variable reach 190, the <strong>RC2</strong> port will be set and when <strong>pulse_max</strong> reach 200 the <strong>RC2</strong> port will be reset, this will make our servo motor to turn clockwise. Again by setting the <strong>top_value</strong>
 variable to 180 the servo motor will turn counterclockwise as it 
receive the 2 ms of PWM signal. Bellow is the code inside the TIMER0 
interrupt service routine:</p>
<pre>if(T0IF) {		  // TIMER0 Interrupt Flag
  pulse_max++;            // Pulse Max Increment
  pulse_top++;            // Pulse Top Increment</pre>
<pre>  /* MAX_VALUE=200 turn off the pulse */
  if (pulse_max &gt;= MAX_VALUE) {
    pulse_max=0;
    pulse_top=0;
    RC2=0;                // Turn off RC2
  }
<pre>  /* top_value = MAX_VALUE - n, n=10: 10 x 0.1ms = 1.0ms, n=20: 20 x 0.1ms = 2.0ms   */
&nbsp; /* 2ms -&gt; CCW Rotation, 1ms -&gt; CW Rotation */
 &nbsp;if (pulse_top == top_value) {
&nbsp;&nbsp;&nbsp; RC2=1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;         // Turn On RC2
&nbsp; }
  TMR0 = 156;             // Initial Value for 0.1ms Interrupt
&nbsp; T0IF = 0;&nbsp;&nbsp;&nbsp;&nbsp;           // Clear TIMER0 interrupt flag
}</pre>
</pre>
<p>Because the TIMER0 interrupt flag bit (<strong>T0IF</strong>) in the <strong>INTCON</strong> register is not automatically reset to <strong>0</strong>, therefore we have to manually reset it inside the TIMER0 interrupt function.</p>
<p>As you see by using this method the program code for controlling the 
servo motor will be much easier now as we only assign the correct value 
to the <strong>top_value</strong> variable and let the PIC 
microcontroller TIMER0 peripheral do the job by supplying the required 
PWM signal to the servo motor as it shown on this following C code 
example:</p>
<pre>#define MAX_VALUE 200
#define CCW_ROTATION MAX_VALUE - 20
#define CW_ROTATION MAX_VALUE - 10
#define STOP_ROTATION MAX_VALUE</pre>
<pre>top_value = MAX_VALUE;     // Stop the Servo Motor
top_value = CCW_ROTATION;  // Counterclockwise Rotation
top_value = CW_ROTATION;   // Clockwise Rotation</pre>
<p><strong>The Light Seeking Sensor</strong></p>
<p>As I mention before that instead of just making our servo motor to 
rotate clockwise (CW) or counterclockwise (CCW); we will use it to 
position our paper head toward the light source. This can be achieve by 
using the pair of LDRs to detect the light source and base on the light 
intensity information received by the LDR pair; we make the servo motor 
to rotate in such away that our head paper will always facing the light 
source as seen on this following picture</p>
<p><a href="http://www.ermicro.com/blog/wp-content/uploads/2009/02/servo_10.jpg"><img class="alignnone size-full wp-image-784" title="servo_10" src="Basic%20Servo%20Motor%20Controlling%20with%20Microchip%20PIC%20Microcontroller%20_%20ermicroblog_files/servo_10.jpg" alt="" height="260" width="576"></a></p>
<p>The LDR pairs will constantly give the light source position feedback
 to the servo motor so it can always turn our paper head toward the 
light source; this is known as the <strong>close loop control</strong> which is one of the most important topics in the embedded system.</p>
<p>The method of controlling the paper head we use here is called the “<strong>on-off controller</strong>” or “<strong>bang-bang controller</strong>“;
 this is the simplest method of controlling usually found in the heater,
 air-condition and refrigerator for controlling the temperature or in 
the line follower robot and summo wrestling robot. The more advanced 
controlling method is called the “<strong>PID (Proportional, Integral, Derivative) controller</strong>”
 which is used such as in motor speed controlling, however we will not 
discuss this controlling method on this tutorial, but once you 
understand and implement the principal of the basic close loop control 
presented here, later on it will be easier for you to learn this PID 
controlling method.</p>
<p>The algorithm we use here is base on the differential value returned 
by the left LDR and the right LDR; the positive result will rotate the 
servo motor counterclockwise and the negative result will rotate the 
servo motor clockwise. The servo motor will keep rotating until the 
different result is zero; which mean the paper head is facing the light 
source.</p>
<p>To make the servo motor rotate smoothly we use the threshold value or known as the <strong>hysteresis band</strong>
 in the on-off controller method, this mean if the different result is 
within the hysteresis band the servo motor will always stop and if the 
different result is outside the hysteresis band the servo motor will 
start to rotate counterclockwise or clockwise as shown in this following
 time diagram:</p>
<p><a href="http://www.ermicro.com/blog/wp-content/uploads/2009/02/servo_11.jpg"><img class="alignnone size-full wp-image-785" title="servo_11" src="Basic%20Servo%20Motor%20Controlling%20with%20Microchip%20PIC%20Microcontroller%20_%20ermicroblog_files/servo_11.jpg" alt="" height="210" width="593"></a></p>
<p>The following is the C code for implementing the on-off controller method with the hysteresis band:</p>
<pre>#define THRESHOLD_VALUE 50</pre>
<pre>/* Get the different */
ldr_diff=ldr_left - ldr_right;    

if ((ldr_diff &gt;= -THRESHOLD_VALUE) &amp;&amp; (ldr_diff &lt;= THRESHOLD_VALUE)) {
  top_value = MAX_VALUE;     // Stop the Servo Motor
} else {
  if (ldr_diff &gt; THRESHOLD_VALUE) {
    topvalue=CCW_ROTATION;  // Counterclockwise Rotation
  } else {
    topvalue=CW_ROTATION;   // Clockwise Rotation
  }
}</pre>
<p>The LDRs value is read by the PIC ADC peripheral through the analog input port channel 4 (<strong>AN4</strong>) and channel 5 (<strong>AN5</strong>); when the left LDR received more light compare to the right LDR the voltage level input on the <strong>AN4</strong>
 port will be more higher and the different result in ldr_diff variable 
will be positive; when the right LDR received more light than the 
voltage level input on the AN5 port will be more higher and the 
different result in ldr_diff variable will be negative. The following is
 the C code used to read the LDR’s voltage level:</p>
<pre>/* Read the ADC here */
ADCON0=0b00010001;       // select left justify result. ADC port channel AN4
GODONE=1;	             // initiate conversion on the channel 4</pre>
<pre>while(GODONE) continue;  // Wait for ldr_left conversion done
ldr_left=ADRESH;         // Read 8 bits MSB, Ignore 2 bits LSB in ADRESL</pre>
<pre>ADCON0=0b00010101;       // select left justify result. ADC port channel AN5
GODONE=1;	             // initiate conversion on the channel 5</pre>
<pre>while(GODONE) continue;  // Wait for ldr_right conversion done
ldr_right=ADRESH;        // Read 8 bits MSB, Ignore 2 bits LSB in ADRESL</pre>
<p>To learn more about the PIC ADC (analog to digital conversion) peripheral you could read the <a title="PIC Analog to Digital Converter C Programming" href="http://www.ermicro.com/blog/?p=660" target="_blank">PIC Analog to Digital Converter C Programming posted</a> in this blog.</p>
<p><strong>Inside the C Code</strong></p>
<p>This program is start by initializing the PIC port used in this 
tutorial and continue with the PIC ADC peripheral clock selection in the
 <strong>ADCON1</strong> register for using the 8 Mhz internal clock and
 the last is to initial the PIC TIMER0 peripheral. After the 
initialization process the program enter the endless loop where we read 
the voltage level returned by the left LDR and the right LDR and do the “<strong>bang-bang controller</strong>” algorithm.</p>
<pre>/* Initial Port Used */
TRISC = 0x03;        // Set RC0 and RC1 as input others as Output
ANSEL = 0x30;        // Set PORT AN4 and AN5 as analog input
ANSELH = 0x00;       // Set PORT AN8 to AN11 as Digital I/O
PORTC = 0x00;        // Turn Off all PORTC</pre>
<p>It’s important to remember that we have set the port to the analog 
input mode first before we use it for reading the analog signal.</p>
<p><strong>Downloading the Code</strong></p>
<p>After compiling and simulating your code hook up your PICKit2 
programmer to the  PICJazz 16F690 board ICSP port turn the PICJazz 
16F690 power. From the MPLAB IDE menu select <strong>Programmer</strong> -&gt; <strong>Select Programmer</strong> -&gt; <strong>Pickit2</strong> it will automatically configure the connection and display it on the PICkit2 tab Output windows:</p>
<p><a href="http://www.ermicro.com/blog/wp-content/uploads/2009/02/servo_05.jpg"><img class="alignnone size-full wp-image-786" title="servo_05" src="Basic%20Servo%20Motor%20Controlling%20with%20Microchip%20PIC%20Microcontroller%20_%20ermicroblog_files/servo_05.jpg" alt="" height="173" width="557"></a></p>
<p><a href="http://www.ermicro.com/blog/wp-content/uploads/2009/02/servo_06.jpg"><img class="alignnone size-full wp-image-787" title="servo_06" src="Basic%20Servo%20Motor%20Controlling%20with%20Microchip%20PIC%20Microcontroller%20_%20ermicroblog_files/servo_06.jpg" alt="" height="173" width="556"></a></p>
<p>Now you are ready to down load the code from MPLAB IDE menu select <strong>Programmer</strong> -&gt; <strong>Program</strong>; this will down load the HEX code into the PICJazz 16F690 board:</p>
<p><a title="Basic Servo Motor Controlling with Microchip PIC Microcontroller  by ermicroinfo, on Flickr" href="http://www.flickr.com/photos/33738505@N05/3286984703/"><img src="Basic%20Servo%20Motor%20Controlling%20with%20Microchip%20PIC%20Microcontroller%20_%20ermicroblog_files/3286984703_f46d455ac6.jpg" alt="Basic Servo Motor Controlling with Microchip PIC Microcontroller " height="359" width="500"></a></p>
<p>Now just relax and enjoy your light seeking head in action:</p>
<p><object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0" height="344" width="425"><param name="allowFullScreen" value="true"><param name="allowscriptaccess" value="always"><param name="src" value="http://www.youtube.com/v/y0tKPoZLXi8&amp;hl=en&amp;fs=1"><embed type="application/x-shockwave-flash" src="Basic%20Servo%20Motor%20Controlling%20with%20Microchip%20PIC%20Microcontroller%20_%20ermicroblog_files/y0tKPoZLXi8hlenfs1.swf" allowscriptaccess="always" allowfullscreen="true" height="344" width="425"></object></p>
<p class="bookmark-me"></p><h3>Bookmarks and Share</h3><br><a title="technorati.com" href="http://www.technorati.com/faves?add=http%3A%2F%2Fwww.ermicro.com%2Fblog%2F%3Fp%3D771" target="_blank" rel="nofollow"><img src="Basic%20Servo%20Motor%20Controlling%20with%20Microchip%20PIC%20Microcontroller%20_%20ermicroblog_files/technorati.png" style="margin: 0pt; border: 0pt none; padding: 0pt;" alt="bookmark"></a> <a title="del.icio.us" href="http://del.icio.us/post?url=http%3A%2F%2Fwww.ermicro.com%2Fblog%2F%3Fp%3D771&amp;title=Basic+Servo+Motor+Controlling+with+Microchip+PIC+Microcontroller" target="_blank" rel="nofollow"><img src="Basic%20Servo%20Motor%20Controlling%20with%20Microchip%20PIC%20Microcontroller%20_%20ermicroblog_files/delicious.png" style="margin: 0pt; border: 0pt none; padding: 0pt;" alt="bookmark"></a> <a title="stumbleupon.com" href="http://www.stumbleupon.com/submit?url=http%3A%2F%2Fwww.ermicro.com%2Fblog%2F%3Fp%3D771&amp;title=Basic+Servo+Motor+Controlling+with+Microchip+PIC+Microcontroller" target="_blank" rel="nofollow"><img src="Basic%20Servo%20Motor%20Controlling%20with%20Microchip%20PIC%20Microcontroller%20_%20ermicroblog_files/stumbleupon.png" style="margin: 0pt; border: 0pt none; padding: 0pt;" alt="bookmark"></a> <a title="digg.com" href="http://digg.com/submit?url=http%3A%2F%2Fwww.ermicro.com%2Fblog%2F%3Fp%3D771&amp;title=Basic+Servo+Motor+Controlling+with+Microchip+PIC+Microcontroller" target="_blank" rel="nofollow"><img src="Basic%20Servo%20Motor%20Controlling%20with%20Microchip%20PIC%20Microcontroller%20_%20ermicroblog_files/digg.png" style="margin: 0pt; border: 0pt none; padding: 0pt;" alt="bookmark"></a> <a title="www.facebook.com" href="http://www.facebook.com/share.php?u=http%3A%2F%2Fwww.ermicro.com%2Fblog%2F%3Fp%3D771&amp;t=Basic+Servo+Motor+Controlling+with+Microchip+PIC+Microcontroller" target="_blank" rel="nofollow"><img src="Basic%20Servo%20Motor%20Controlling%20with%20Microchip%20PIC%20Microcontroller%20_%20ermicroblog_files/facebook.png" style="margin: 0pt; border: 0pt none; padding: 0pt;" alt="bookmark"></a> <a title="bookmarks.yahoo.com" href="http://bookmarks.yahoo.com/toolbar/savebm?opener=tb&amp;u=http%3A%2F%2Fwww.ermicro.com%2Fblog%2F%3Fp%3D771" target="_blank" rel="nofollow"><img src="Basic%20Servo%20Motor%20Controlling%20with%20Microchip%20PIC%20Microcontroller%20_%20ermicroblog_files/yahoo.png" style="margin: 0pt; border: 0pt none; padding: 0pt;" alt="bookmark"></a> <a title="www.google.com" href="http://www.google.com/bookmarks/mark?op=edit&amp;output=popup&amp;bkmk=http%3A%2F%2Fwww.ermicro.com%2Fblog%2F%3Fp%3D771&amp;title=Basic+Servo+Motor+Controlling+with+Microchip+PIC+Microcontroller" target="_blank" rel="nofollow"><img src="Basic%20Servo%20Motor%20Controlling%20with%20Microchip%20PIC%20Microcontroller%20_%20ermicroblog_files/google.png" style="margin: 0pt; border: 0pt none; padding: 0pt;" alt="bookmark"></a> <a title="furl.com" href="http://www.furl.net/storeIt.jsp?u=http%3A%2F%2Fwww.ermicro.com%2Fblog%2F%3Fp%3D771&amp;t=Basic+Servo+Motor+Controlling+with+Microchip+PIC+Microcontroller" target="_blank" rel="nofollow"><img src="Basic%20Servo%20Motor%20Controlling%20with%20Microchip%20PIC%20Microcontroller%20_%20ermicroblog_files/furl.png" style="margin: 0pt; border: 0pt none; padding: 0pt;" alt="bookmark"></a> <a title="reddit.com" href="http://reddit.com/submit?url=http%3A%2F%2Fwww.ermicro.com%2Fblog%2F%3Fp%3D771&amp;title=Basic+Servo+Motor+Controlling+with+Microchip+PIC+Microcontroller" target="_blank" rel="nofollow"><img src="Basic%20Servo%20Motor%20Controlling%20with%20Microchip%20PIC%20Microcontroller%20_%20ermicroblog_files/reddit.png" style="margin: 0pt; border: 0pt none; padding: 0pt;" alt="bookmark"></a> <a title="windowslive.com" href="https://favorites.live.com/quickadd.aspx?mkt=en-us&amp;url=http%3A%2F%2Fwww.ermicro.com%2Fblog%2F%3Fp%3D771" target="_blank" rel="nofollow"><img src="Basic%20Servo%20Motor%20Controlling%20with%20Microchip%20PIC%20Microcontroller%20_%20ermicroblog_files/windowslive.png" style="margin: 0pt; border: 0pt none; padding: 0pt;" alt="bookmark"></a> <br><br><br><p></p><h3>Related Posts</h3><ul class="related_post"><li><a href="http://www.ermicro.com/blog/?p=983" title="Building BRAM your first Autonomous Mobile Robot using Microchip PIC Microcontroller – Part 1">Building BRAM your first Autonomous Mobile Robot using Microchip PIC Microcontroller – Part 1</a></li><li><a href="http://www.ermicro.com/blog/?p=706" title="H-Bridge Microchip PIC Microcontroller PWM Motor Controller">H-Bridge Microchip PIC Microcontroller PWM Motor Controller</a></li><li><a href="http://www.ermicro.com/blog/?p=1016" title="Behavior Based Artificial Intelligent Mobile Robot with Sharp GP2D120 Distance Measuring Sensor - BRAM Part 2">Behavior Based Artificial Intelligent Mobile Robot with Sharp GP2D120 Distance Measuring Sensor - BRAM Part 2</a></li><li><a href="http://www.ermicro.com/blog/?p=844" title="Seven Segment Display Thermometer with PIC Microcontroller ">Seven Segment Display Thermometer with PIC Microcontroller </a></li><li><a href="http://www.ermicro.com/blog/?p=660" title="PIC Analog to Digital Converter C Programming">PIC Analog to Digital Converter C Programming</a></li></ul>
<!-- Start Google Adsense  -->
<br><br>

<script type="text/javascript"><!--
google_ad_client = "pub-9787882570656893";
/* 468x60, created 3/12/09 */
google_ad_slot = "9374687509";
google_ad_width = 468;
google_ad_height = 60;
//-->
</script>
<script type="text/javascript" src="Basic%20Servo%20Motor%20Controlling%20with%20Microchip%20PIC%20Microcontroller%20_%20ermicroblog_files/show_ads.js">
</script><ins style="display:inline-table;border:none;height:60px;margin:0;padding:0;position:relative;visibility:visible;width:468px"><ins id="aswift_2_anchor" style="display:block;border:none;height:60px;margin:0;padding:0;position:relative;visibility:visible;width:468px"><iframe allowtransparency="true" hspace="0" marginwidth="0" marginheight="0" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){i+='.call';setTimeout(h,0)}else if(h.match){i+='.nav';w.location.replace(h)}s.log&amp;&amp;s.log.push(i)}" vspace="0" id="aswift_2" name="aswift_2" style="left: 0pt; position: absolute; top: 0pt;" scrolling="no" frameborder="0" height="60" width="468"></iframe></ins></ins>

<!-- End Google Adsense -->

<div id="more_entries">
<div class="oe"></div><div class="re"></div>
</div>


<!-- You can start editing here. -->


<h3 class="comm" id="comments">65 Responses to “Basic Servo Motor Controlling with Microchip PIC Microcontroller”</h3>


	

<div class="comment " id="comment-24">
<div class="comment_date_and_id"><span class="comm_date">30.04.09</span><span class="comm_id">#1</span></div>
<p class="comment_by">Comment by <b>ajak</b>.</p>
<p>Hi Ronald, if i am right this line of code should be change..</p>
<p>unsigned char topvalue=0;</p>
<p>should be like this</p>
<p>unsigned char top_value=0;</p>
<p>can you recheck it? so you can edit it..</p>
<p>thanks..</p>
</div>


	
	
<div class="comment " id="comment-25">
<div class="comment_date_and_id"><span class="comm_date">30.04.09</span><span class="comm_id">#2</span></div>
<p class="comment_by">Comment by <b>ajak</b>.</p>
<p>Your blog is very nice and very informative.. Keep up the good job.. Thanks.</p>
<p>Goodluck..</p>
</div>


	
	
<div class="comment " id="comment-26">
<div class="comment_date_and_id"><span class="comm_date">30.04.09</span><span class="comm_id">#3</span></div>
<p class="comment_by">Comment by <b><a href="http://rwb/" rel="external nofollow">rwb</a></b>.</p>
<p>Thank you ajak for your correction, you are right all the topvalue should be changed with top_value !</p>
</div>


	
	
<div class="comment " id="comment-291">
<div class="comment_date_and_id"><span class="comm_date">30.05.10</span><span class="comm_id">#4</span></div>
<p class="comment_by">Comment by <b>avinash</b>.</p>
<p>Hi,</p>
<p>How can I know the exact timing requirement of my Servo. I have Futaba S3003 Servo but I am unable to locate the datasheet.</p>
<p>And its web page does not has that Info.</p>
<p>Please help me soon</p>
</div>


	
	
<div class="comment " id="comment-292">
<div class="comment_date_and_id"><span class="comm_date">31.05.10</span><span class="comm_id">#5</span></div>
<p class="comment_by">Comment by <b><a href="http://rwb/" rel="external nofollow">rwb</a></b>.</p>
<p>For CCW use 1.7 - 2.0 ms, CW 0.7 - 1.0 ms and center is about 1.5 ms.
 “The exact PWM width is depend on the servo motor types and brands”. 
Try to experiment with your own servo (Futaba S3003) to get the required
 value, most of the servo is manufactured with wide tolerant to these 
values; therefore you could start with the value shown on this project.</p>
</div>


	
	
<div class="comment " id="comment-293">
<div class="comment_date_and_id"><span class="comm_date">31.05.10</span><span class="comm_id">#6</span></div>
<p class="comment_by">Comment by <b>avinash</b>.</p>
<p>Thanks!</p>
<p>But where I can get exact values. Don’t the manufacturer provide this data anywhere ?</p>
</div>


	
	
<div class="comment " id="comment-294">
<div class="comment_date_and_id"><span class="comm_date">31.05.10</span><span class="comm_id">#7</span></div>
<p class="comment_by">Comment by <b><a href="http://rwb/" rel="external nofollow">rwb</a></b>.</p>
<p>Yes they do; for the parallax servo I used in this project they have 
the data sheet complete with the example code using parallax basic 
stamp. The keyword here is to “experiment” with your servo.</p>
</div>


	
	
<div class="comment " id="comment-295">
<div class="comment_date_and_id"><span class="comm_date">31.05.10</span><span class="comm_id">#8</span></div>
<p class="comment_by">Comment by <b>avinash</b>.</p>
<p>Hi,<br>
I experimented with my Futaba S3003 servo and the results were</p>
<p>0.4 ms for 0 degree (may be some call it -90)<br>
2.3 ms for 180 degree</p>
<p>does it look ok?</p>
</div>


	
	
<div class="comment " id="comment-296">
<div class="comment_date_and_id"><span class="comm_date">31.05.10</span><span class="comm_id">#9</span></div>
<p class="comment_by">Comment by <b>avinash</b>.</p>
<p>Maximum angle the servo is turning is slight more than 180 degrees is that OK ?</p>
</div>


	
	
<div class="comment " id="comment-297">
<div class="comment_date_and_id"><span class="comm_date">31.05.10</span><span class="comm_id">#10</span></div>
<p class="comment_by">Comment by <b><a href="http://rwb/" rel="external nofollow">rwb</a></b>.</p>
<p>For me as long as the servo works it’s ok despite the value you used 
(remember in electronics world there are no such an absolute value). You
 could try to gently calibrate the servo by adjusting the servo trimport
 if it move more than 180 degrees.</p>
</div>


	
	
<div class="comment " id="comment-319">
<div class="comment_date_and_id"><span class="comm_date">07.07.10</span><span class="comm_id">#11</span></div>
<p class="comment_by">Comment by <b>riverdan</b>.</p>
<p>OK, I highlighted and copy the c code, paste it in notepad ++ ,Save 
it as c code, project wized it but when i try to compile it i get 
errors. rwb sent me the code for the room therm and it worked fine. i 
had the same thing with it. would someone send me the servo.c file. I 
have Microsoft Visual Studio 2008<br>
<a href="mailto:riverdan@riverdan.com">riverdan@riverdan.com</a></p>
<p>Thanks All</p>
</div>


	
	
<div class="comment " id="comment-320">
<div class="comment_date_and_id"><span class="comm_date">07.07.10</span><span class="comm_id">#12</span></div>
<p class="comment_by">Comment by <b><a href="http://rwb/" rel="external nofollow">rwb</a></b>.</p>
<p>Try to cut and paste again, its seem the variable top_value is 
wrongly being interpreted by the blog’s editor to topvalue. When I 
intended to put top_value=VALUE it always interpreted as topvalue=VALUE,
 but if I write top_value = VALUE (i.e. put a space between the equal 
sign) it seem its correctly put the right one.</p>
</div>


	
	
<div class="comment " id="comment-401">
<div class="comment_date_and_id"><span class="comm_date">25.10.10</span><span class="comm_id">#13</span></div>
<p class="comment_by">Comment by <b>akhutwad</b>.</p>
<p>I am unable to find PIC16F690 here in Pune. But I am having 
PIC16F877A and PIC18F452 with me. I tried compiling same program with 
them,but encounter lots of error. what changes need to be done to work 
with mention processors. I am new to mc programming, tried changing few 
things but not working with demo setup.</p>
<p>thanks in advance.</p>
<p>Ankush</p>
</div>


	
	
<div class="comment " id="comment-402">
<div class="comment_date_and_id"><span class="comm_date">25.10.10</span><span class="comm_id">#14</span></div>
<p class="comment_by">Comment by <b><a href="http://rwb/" rel="external nofollow">rwb</a></b>.</p>
<p>You need to change the configuration bit and the OSCCON register when
 you use PIC16F877A since the PIC16F877A microcontroller has no internal
 oscillator clock like PIC16F690.</p>
</div>


	
	
<div class="comment " id="comment-403">
<div class="comment_date_and_id"><span class="comm_date">25.10.10</span><span class="comm_id">#15</span></div>
<p class="comment_by">Comment by <b>akhutwad</b>.</p>
<p>Please find below code edited by me, original program is written by 
me. I just tried to modify to work for PIC16F877a. I wanted to use RA0 
&amp; RA1 as input channel and RD7 as output the motor. Please please 
please have some time and verify the code once (code truncated!)</p>
</div>


	
	
<div class="comment " id="comment-404">
<div class="comment_date_and_id"><span class="comm_date">25.10.10</span><span class="comm_id">#16</span></div>
<p class="comment_by">Comment by <b><a href="http://rwb/" rel="external nofollow">rwb</a></b>.</p>
<p>If you want to submit a large code, you could email directly to <a href="mailto:ermicroblog@gmail.com">ermicroblog@gmail.com</a>.
 When you submit your code through this comment it will contain many 
HTML specified code, therefore your code will be mixed with the HTML 
code which make your code hard to be read.</p>
<p>Anyway seeing your code it seem you are trying to use “delay_us” and 
“for()” loop to control your servo. This means you have to measure 
precisely the servo required timing (PWM). My suggestion is to try the 
method presented on this project to control your servo.</p>
</div>


	
	
<div class="comment " id="comment-406">
<div class="comment_date_and_id"><span class="comm_date">26.10.10</span><span class="comm_id">#17</span></div>
<p class="comment_by">Comment by <b>akhutwad</b>.</p>
<p>please advice me what all changes need to be done to work above 
program as it on pic16f877a. I am new to the programming, please suggest
 changes. i tried various options, but it did  not work. I am not sure 
whether pic is faulty or not. I tried another program with stepper motor
 earlier on same PIC and it work there. I want to use servo instead of 
stepper so I need to test this program.</p>
</div>


	
	
<div class="comment " id="comment-407">
<div class="comment_date_and_id"><span class="comm_date">26.10.10</span><span class="comm_id">#18</span></div>
<p class="comment_by">Comment by <b><a href="http://rwb/" rel="external nofollow">rwb</a></b>.</p>
<p>The program did not work has many reasons, since you used your own 
hardware and code. Driving stepper motor is totally different compared 
to servo motor. Therefore I only can suggest that you learn and 
understand the principle of how to drive the servo motor presented in 
this project and try to apply it.</p>
</div>


	
	
<div class="comment " id="comment-408">
<div class="comment_date_and_id"><span class="comm_date">26.10.10</span><span class="comm_id">#19</span></div>
<p class="comment_by">Comment by <b>akhutwad</b>.</p>
<p>will this logic work for high torque servo motor too? do do we need any signal booster circuit to get more torque?</p>
</div>


	
	
<div class="comment " id="comment-409">
<div class="comment_date_and_id"><span class="comm_date">26.10.10</span><span class="comm_id">#20</span></div>
<p class="comment_by">Comment by <b><a href="http://rwb/" rel="external nofollow">rwb</a></b>.</p>
<p>Yes, the logic should work on any standard servo motor, but you still
 need to read the servo motor specification to make sure it could be 
driven with standard servo PWM signal.</p>
</div>


	
	
<div class="comment " id="comment-420">
<div class="comment_date_and_id"><span class="comm_date">30.10.10</span><span class="comm_id">#21</span></div>
<p class="comment_by">Comment by <b>akhutwad</b>.</p>
<p>what is the pin layout for PICKit3 icsp programmer for PIC16F690</p>
</div>


	
	
<div class="comment " id="comment-421">
<div class="comment_date_and_id"><span class="comm_date">30.10.10</span><span class="comm_id">#22</span></div>
<p class="comment_by">Comment by <b><a href="http://rwb/" rel="external nofollow">rwb</a></b>.</p>
<p>The standard Microchip PICKit3 ICSP for PIC16F690: Pin 1: MCLR/Vpp 
-&gt; RA3 (4),Pin 2:Vdd -&gt; Vdd (1),Pin 3: GND -&gt; Vss (20),Pin 
4:PGD/ICSPDAT -&gt; RA0 (19),Pin 5: PGC/ICSPCLK -&gt; RA1 (18),and Pin 
6:LVP -&gt; No Connection. For more information you should read the 
PICKit3 user’s guide and PIC16F690 datasheet.</p>
</div>


	
	
<div class="comment " id="comment-422">
<div class="comment_date_and_id"><span class="comm_date">31.10.10</span><span class="comm_id">#23</span></div>
<p class="comment_by">Comment by <b>akhutwad</b>.</p>
<p>what need to be add to the program, if no light source detected. e.g 
if there is no light or in complete dark condition i want motor be reset
 to 0</p>
</div>


	
	
<div class="comment " id="comment-423">
<div class="comment_date_and_id"><span class="comm_date">31.10.10</span><span class="comm_id">#24</span></div>
<p class="comment_by">Comment by <b><a href="http://rwb/" rel="external nofollow">rwb</a></b>.</p>
<p>In this project when both LDR return equal value (ADC), the servo 
will stop (the ADC value within the threshold value). Here you could add
 the program logic to check whether they both in dark condition and then
 give command to reset the servo (move to center). Again you should 
understand how the program’s work in order to adapt it to your need.</p>
</div>


	
	
<div class="comment " id="comment-424">
<div class="comment_date_and_id"><span class="comm_date">01.11.10</span><span class="comm_id">#25</span></div>
<p class="comment_by">Comment by <b>akhutwad</b>.</p>
<p>what should be the top_value to reset the motor position.</p>
</div>


	
	
<div class="comment " id="comment-425">
<div class="comment_date_and_id"><span class="comm_date">01.11.10</span><span class="comm_id">#26</span></div>
<p class="comment_by">Comment by <b><a href="http://rwb/" rel="external nofollow">rwb</a></b>.</p>
<p>The standard servo center position (reset) pulse width is about 1.5 
ms. Therefore top_value = MAX_VALUE - 15, where MAX_VALUE = 200. For 
detail of how to get this value, please study the article above.</p>
</div>


	
	
<div class="comment " id="comment-428">
<div class="comment_date_and_id"><span class="comm_date">10.11.10</span><span class="comm_id">#27</span></div>
<p class="comment_by">Comment by <b>shubash123</b>.</p>
<p>video is really promising, and reading all the above comments.  can 
this be work for solar tracker. how to move motor for particular angle 
with pwm signal and reset it back to zero position at the end of day.</p>
</div>


	
	
<div class="comment " id="comment-429">
<div class="comment_date_and_id"><span class="comm_date">10.11.10</span><span class="comm_id">#28</span></div>
<p class="comment_by">Comment by <b><a href="http://rwb/" rel="external nofollow">rwb</a></b>.</p>
<p>Yes, it could be used for solar tracker, you have to experiment with 
the PWM timing until it reach to the needed angle (for precision angle 
you could use a stepper motor). At the end of day you could reset the 
servo facing to the rising sun on the next day.</p>
</div>


	
	
<div class="comment " id="comment-430">
<div class="comment_date_and_id"><span class="comm_date">12.11.10</span><span class="comm_id">#29</span></div>
<p class="comment_by">Comment by <b>shubash123</b>.</p>
<p>Thanks for the reply<br>
I m still confuse about motor movement. how motor will move if light 
source will move only one direction in daytime. how the difference will 
calculate. what will be the value of ldr in that condition. as per the 
above program motor initialize in central position and then as per the 
light move it goes clockwise or anticlockwise but how to start from zero
 position</p>
</div>


	
	
<div class="comment " id="comment-431">
<div class="comment_date_and_id"><span class="comm_date">12.11.10</span><span class="comm_id">#30</span></div>
<p class="comment_by">Comment by <b><a href="http://rwb/" rel="external nofollow">rwb</a></b>.</p>
<p>You should read the above article especially in the “Light Seeking 
Sensor” part. See the picture and explanation of how the LDR is mounted 
so they could be functioned as the light tracking sensor. On this 
project there is no default (zero) position, the servo simply stay on 
its previous position when dark (no light). Therefore you need to add 
this feature in the C program code.</p>
</div>


	
	
<div class="comment " id="comment-432">
<div class="comment_date_and_id"><span class="comm_date">13.11.10</span><span class="comm_id">#31</span></div>
<p class="comment_by">Comment by <b>shubash123</b>.</p>
<p>Hi, I tried this code and circuit on test board, but motor moves 
faster then visible in above video. are you using different code for 
video? how motor moves slow here in video?<br>
is Trimport doing any trick?</p>
</div>


	
	
<div class="comment " id="comment-433">
<div class="comment_date_and_id"><span class="comm_date">13.11.10</span><span class="comm_id">#32</span></div>
<p class="comment_by">Comment by <b><a href="http://rwb/" rel="external nofollow">rwb</a></b>.</p>
<p>Yes, the code presented here is the same as the code run in the above
 video. Thing that you should know when you supply the continues PWM 
signal to the DC servo motor, then the rotation speed is depend on the 
servo mechanical (i.e. geared motor inside) not on the PWM signal. The 
way we control the DC servo motor rotation is by using the required PWM 
signal for some period of time. Trimport and LDR are used to provide 
analog input (voltage divider) to the microcontroller.</p>
</div>


	
	
<div class="comment " id="comment-450">
<div class="comment_date_and_id"><span class="comm_date">19.12.10</span><span class="comm_id">#33</span></div>
<p class="comment_by">Comment by <b>saad770</b>.</p>
<p>please tell me why are u using PICJazz 20PIN Board<br>
.we can use any pic burner?<br>
one thing more servo demoanstration cct is the only cct that we have to implement?</p>
<p>inshort what is the significance of PICJazz 20PIN Board?</p>
<p>thanks</p>
</div>


	
	
<div class="comment " id="comment-451">
<div class="comment_date_and_id"><span class="comm_date">19.12.10</span><span class="comm_id">#34</span></div>
<p class="comment_by">Comment by <b><a href="http://rwb/" rel="external nofollow">rwb</a></b>.</p>
<p>Of course you could use any development board available on the 
market, the reason I use the PICJazz 20PIN development board because is 
specially designed to be used on 8-bit 20 pins Microchip microcontroller
 PIC16/18 as well as the PICAXE microcontroller which is base on 
Microchip PIC16/18 microcontroller. The PICJazz 20PIN board is suitable 
for most beginners and hobbyists who want to make project base on the 
Microchip 20 pins Microcontroller and the board also use standard 
through hole components for easy repair. You could find more information
 about this board <a href="http://www.ermicro.com/blog/?p=15" rel="nofollow">here</a>.</p>
<p>On this project I use PIC16F690 TIMER0 to control the servo movement.</p>
</div>


	
	
<div class="comment " id="comment-452">
<div class="comment_date_and_id"><span class="comm_date">20.12.10</span><span class="comm_id">#35</span></div>
<p class="comment_by">Comment by <b>saad770</b>.</p>
<p>really sory to disturb u again.<br>
my compiler is giving so much errors i have pasted the same code as given above.here’s the errors</p>
<p>Executing: “C:\Program Files\Microchip\MPASM Suite\MPASMWIN.exe” /q 
/p16F690 “Untitled.asm” /l”Untitled.lst” /e”Untitled.err” /d__DEBUG=1<br>
Error[108]   C:\USERS\MY PC\DOCUMENTS\DOWNLOADS\COMPRESSED\UNTITLED.ASM 1 : Illegal character (/)<br>
…[error messages is truncated]…<br>
please help me out.<br>
thanks</p>
</div>


	
	
<div class="comment " id="comment-453">
<div class="comment_date_and_id"><span class="comm_date">20.12.10</span><span class="comm_id">#36</span></div>
<p class="comment_by">Comment by <b><a href="http://rwb/" rel="external nofollow">rwb</a></b>.</p>
<p>This is a C program (servo.c) not an Assembler program, you need to 
use the Microchip HITECT PICC C Compiler and configure the Microchip 
MPLAB IDE to use the HITECT PICC C compiler instead of Microchip PIC 
Assembler (MPASM) compiler in order to compile this project 
successfully!</p>
</div>


	
	
<div class="comment " id="comment-454">
<div class="comment_date_and_id"><span class="comm_date">21.12.10</span><span class="comm_id">#37</span></div>
<p class="comment_by">Comment by <b>saad770</b>.</p>
<p>thanks a lot<br>
actually im new in this thats y dont know.<br>
thanks again</p>
</div>


	
	
<div class="comment " id="comment-477">
<div class="comment_date_and_id"><span class="comm_date">15.01.11</span><span class="comm_id">#38</span></div>
<p class="comment_by">Comment by <b>ayush</b>.</p>
<p>to get more precision on motor control i decreased the pulse from 1ms
 to .01ms by changing TMR0 value to 9 and changing max_value to 2000 and
 top_value to 1900 or 1800 but motor is not working properly so plz tell
 wats wrong with above method or recommend a different method to improve
 precision.</p>
</div>


	
	
<div class="comment " id="comment-478">
<div class="comment_date_and_id"><span class="comm_date">16.01.11</span><span class="comm_id">#39</span></div>
<p class="comment_by">Comment by <b><a href="http://rwb/" rel="external nofollow">rwb</a></b>.</p>
<p>You could not change the 1ms to 0.01ms. The servo motor is designed 
to work with 1ms pulse period in order to rotate  clockwise (please read
 the articles for more explanation). Therefore to make the servo motor 
rotate at specified angle, you need to apply this 1ms pulse to the servo
 at specified period of time, means the servo rotation angle is depend 
on how long you apply this 1ms pulse to the servo motor.</p>
</div>


	
	
<div class="comment " id="comment-485">
<div class="comment_date_and_id"><span class="comm_date">25.01.11</span><span class="comm_id">#40</span></div>
<p class="comment_by">Comment by <b>pichaha</b>.</p>
<p>Hello I am a new member in your site…your articles are great…ok in 
response to your previous reply…how about if I want to stop at a 
specific angle for some time??</p>
</div>


	
	
<div class="comment " id="comment-486">
<div class="comment_date_and_id"><span class="comm_date">25.01.11</span><span class="comm_id">#41</span></div>
<p class="comment_by">Comment by <b><a href="http://rwb/" rel="external nofollow">rwb</a></b>.</p>
<p>Just stop supply the required pulse to the servo motor after it get 
to the specific angle (top_value = MAX_VALUE) and call the delay 
function.</p>
</div>


	
	
<div class="comment " id="comment-487">
<div class="comment_date_and_id"><span class="comm_date">26.01.11</span><span class="comm_id">#42</span></div>
<p class="comment_by">Comment by <b>pichaha</b>.</p>
<p>Thanks for the reply…I have two questions here…the first one…if I 
stop the motor(from your reply it mean keep providing 0v to it right), 
won’t the motor turn back to its initial position which is what other 
electrical devices will normally function?…secondly if I want to go back
 to the initial position, all I need is just appplying 1.5ms. pulse 
width right?<br>
Sorry, I am new in servo, thansk a lot</p>
</div>


	
	
<div class="comment " id="comment-488">
<div class="comment_date_and_id"><span class="comm_date">26.01.11</span><span class="comm_id">#43</span></div>
<p class="comment_by">Comment by <b><a href="http://rwb/" rel="external nofollow">rwb</a></b>.</p>
<p>The servo will stop at its current position when you stop supply a 
pulse and yes it will go back to center when you apply the 1.5ms pulse.</p>
</div>


	
	
<div class="comment " id="comment-489">
<div class="comment_date_and_id"><span class="comm_date">26.01.11</span><span class="comm_id">#44</span></div>
<p class="comment_by">Comment by <b>pichaha</b>.</p>
<p>Finally I have some understading about servo…this will definitely 
provide great help to my projects…thanks a lot and best regards.</p>
</div>


	
	
<div class="comment " id="comment-543">
<div class="comment_date_and_id"><span class="comm_date">09.02.11</span><span class="comm_id">#45</span></div>
<p class="comment_by">Comment by <b>pichaha</b>.</p>
<p>Hi,<br>
   I have bought a new servo…and I have tried to test the servo motor 
using your timer0 idea…but the result coming out was very weird…my 
expected outcome is to see the servo keep on turning from clockwise to 
cuonter clockwise and vice versa…can I send my source code (very simple 
servo testing codes)to you and you help me rectify where is going wrong?
 Thanks a lot.</p>
</div>


	
	
<div class="comment " id="comment-544">
<div class="comment_date_and_id"><span class="comm_date">09.02.11</span><span class="comm_id">#46</span></div>
<p class="comment_by">Comment by <b><a href="http://rwb/" rel="external nofollow">rwb</a></b>.</p>
<p>Driving servo is simply supplying the right PWM pulse,  you could use
 the Microchip PICKit2 programmer as a logic analyzer to see if your 
program generate the right pulse to the servo motor. For more 
information you could read “<a href="http://www.ermicro.com/blog/?p=1461" rel="nofollow">PIC18 Pulse Width Modulation (PWM) DC Motor Speed Controller with the RPM Counter Project</a>” article.</p>
</div>


	
	
<div class="comment " id="comment-545">
<div class="comment_date_and_id"><span class="comm_date">10.02.11</span><span class="comm_id">#47</span></div>
<p class="comment_by">Comment by <b>pichaha</b>.</p>
<p>Currently I don’t have pickit 2, I am using other programmer and 
mcu(not 16f690) for testing, but my target chip will be 16f690. Is there
 any other method?<br>
Actually, I connected the pwm signal and power lines wrongly when I 
first using the servo but I discovered immediately and unplug them (only
 a few seconds). Will this bring any damage to my servo motor?</p>
</div>


	
	
<div class="comment " id="comment-546">
<div class="comment_date_and_id"><span class="comm_date">10.02.11</span><span class="comm_id">#48</span></div>
<p class="comment_by">Comment by <b>pichaha</b>.</p>
<p>I have tried to measure my pwm signal using osciloscope, I acquired 
44.4Hz for my frequency and 22.5ms for my period…Not the exact 50Hz and 
20ms, is it the reason why it can’t work properly? So, if I want to turn
 cw or ccw, do i need to set exactly the value of 1ms or 2ms…if the 
value less or greater will it work? Sorry for the inconvenience, I never
 touch this topic before…<br>
I am using 20MHz external crystal oscillator and I have it connected to 
CLKIN and CLKOUT and it is in parallel with two disc capacitor connected
 to ground. Thanks a lot.</p>
</div>


	
	
<div class="comment " id="comment-547">
<div class="comment_date_and_id"><span class="comm_date">10.02.11</span><span class="comm_id">#49</span></div>
<p class="comment_by">Comment by <b><a href="http://rwb/" rel="external nofollow">rwb</a></b>.</p>
<p>The servo motor typically is designed with quite wide tolerance to the PWM frequency, therefore you should experiment with it.</p>
</div>


	
	
<div class="comment " id="comment-548">
<div class="comment_date_and_id"><span class="comm_date">11.02.11</span><span class="comm_id">#50</span></div>
<p class="comment_by">Comment by <b>pichaha</b>.</p>
<p>OK but I am afraid if the pulsewidth is overrange it will damage my 
servo. The PWM at min angle for my servo is 0.5ms and max angle is 
2.35ms. So, 22ms or 44Hz is unable to drive servo right?</p>
</div>


	
	
<div class="comment " id="comment-549">
<div class="comment_date_and_id"><span class="comm_date">11.02.11</span><span class="comm_id">#51</span></div>
<p class="comment_by">Comment by <b>unni.0p</b>.</p>
<p>is the Processor fan of computer a servo motor?<br>
can i use that for a servo motor?</p>
</div>


	
	
<div class="comment " id="comment-550">
<div class="comment_date_and_id"><span class="comm_date">11.02.11</span><span class="comm_id">#52</span></div>
<p class="comment_by">Comment by <b><a href="http://rwb/" rel="external nofollow">rwb</a></b>.</p>
<p><strong>@pichaha</strong>: As long as the supply power (i.e. polarity
 and voltage) is within the servo motor specification than your servo 
motor will be fine. The wrong PWM frequency only effecting the servo 
motor rotation.</p>
<p><strong>@unni.0p</strong>: No its not a servo motor, it usually 
called brushless DC motor. The servo motor used in this project is a 
combination of geared DC motor with the electronic motor control circuit
 and position feedback mechanism inside.</p>
</div>


	
	
<div class="comment " id="comment-551">
<div class="comment_date_and_id"><span class="comm_date">12.02.11</span><span class="comm_id">#53</span></div>
<p class="comment_by">Comment by <b>pichaha</b>.</p>
<p>Hi,<br>
I would like to ask, can the servo motor be driven using 5V voltage generated from 7805 voltage regulator??<br>
If i am using 9V battery as the regulator input. Thanks a lot.</p>
</div>


	
	
<div class="comment " id="comment-554">
<div class="comment_date_and_id"><span class="comm_date">13.02.11</span><span class="comm_id">#54</span></div>
<p class="comment_by">Comment by <b><a href="http://rwb/" rel="external nofollow">rwb</a></b>.</p>
<p>Yes, as long as you use the 5 volt servo motor specification</p>
</div>


	
	
<div class="comment " id="comment-559">
<div class="comment_date_and_id"><span class="comm_date">15.02.11</span><span class="comm_id">#55</span></div>
<p class="comment_by">Comment by <b>pichaha</b>.</p>
<p>Hi,<br>
My servo is working already, the motor malfunction was caused by the 
power shortage of the supply. But I have met another question here…I 
want to let my servo to turn in clockwise direction, so I let the pwm 
signal to has 1.0ms pulse width, after that I put a delay loop to make 
it turn in a certain degree(I use  push button to trigger), then I stop 
the motor, there are still other instructions after that. My problem is 
the rotation works only when my delay loop is long enough. When my delay
 loop is short, it sometime works and sometime not works. So how if i 
want my servo to move just a small ditance? Any suggestion? Thanks a 
lot.</p>
</div>


	
	
<div class="comment " id="comment-560">
<div class="comment_date_and_id"><span class="comm_date">16.02.11</span><span class="comm_id">#56</span></div>
<p class="comment_by">Comment by <b><a href="http://rwb/" rel="external nofollow">rwb</a></b>.</p>
<p>Experiment, improve your delay and read button program routine</p>
</div>


	
	
<div class="comment " id="comment-561">
<div class="comment_date_and_id"><span class="comm_date">16.02.11</span><span class="comm_id">#57</span></div>
<p class="comment_by">Comment by <b>pichaha</b>.</p>
<p>What do you mean by improve my delay, do you mean prolong it? What if
 I just want my servo to move for a short distance(small degree)? Thanks
 a lot</p>
</div>


	
	
<div class="comment " id="comment-562">
<div class="comment_date_and_id"><span class="comm_date">16.02.11</span><span class="comm_id">#58</span></div>
<p class="comment_by">Comment by <b><a href="http://rwb/" rel="external nofollow">rwb</a></b>.</p>
<p>In order to rotate the servo motor clockwise at certain degree you 
need to supply the 1 ms PWM at certain period of time. That’s what I 
mean that you have to “experiment” with it (i.e. “delay loop”), because 
you need to know the require period before stop the PWM. The read button
 routine also could effecting this behavior (bounced effect).</p>
</div>


	
	
<div class="comment " id="comment-593">
<div class="comment_date_and_id"><span class="comm_date">27.02.11</span><span class="comm_id">#59</span></div>
<p class="comment_by">Comment by <b>Eric88</b>.</p>
<p>To: rwb</p>
<p>can you provide me a basic servo motor assembler code controlling with Microchip PIC Microcontroller ??<br>
thanks…</p>
</div>


	
	
<div class="comment " id="comment-594">
<div class="comment_date_and_id"><span class="comm_date">27.02.11</span><span class="comm_id">#60</span></div>
<p class="comment_by">Comment by <b><a href="http://rwb/" rel="external nofollow">rwb</a></b>.</p>
<p>No, I don’t have the assembler code for this project.</p>
</div>


	
	
<div class="comment " id="comment-616">
<div class="comment_date_and_id"><span class="comm_date">05.03.11</span><span class="comm_id">#61</span></div>
<p class="comment_by">Comment by <b>milanivic</b>.</p>
<p>can you tell me, why output mesage error:<br>
- undefined identifier “OPTION”<br>
- undefined identifier “GODONE”<br>
thanks</p>
</div>


	
	
<div class="comment " id="comment-617">
<div class="comment_date_and_id"><span class="comm_date">05.03.11</span><span class="comm_id">#62</span></div>
<p class="comment_by">Comment by <b><a href="http://rwb/" rel="external nofollow">rwb</a></b>.</p>
<p>Make sure you install and configure the Microchip MPLAB IDE and Microchip HITECT PICC C compiler correctly.</p>
</div>


	
	
<div class="comment " id="comment-623">
<div class="comment_date_and_id"><span class="comm_date">06.03.11</span><span class="comm_id">#63</span></div>
<p class="comment_by">Comment by <b>milanivic</b>.</p>
<p>Thenks, I instal MPLAB IDE 8.63 and everythings working.<br>
Many thanks for yuor help!</p>
</div>


	
	
<div class="comment " id="comment-629">
<div class="comment_date_and_id"><span class="comm_date">12.03.11</span><span class="comm_id">#64</span></div>
<p class="comment_by">Comment by <b>Secky</b>.</p>
<p>Hi,</p>
<p>What a great and detail article you have, learn a lot from it. thank you.=)</p>
<p>Just wondering can I use this neat method to control more servos by 
creating another variable pulse_top2 and top_value2 and add in the 
following code?</p>
<p>  if (pulse_top2 == top_value2) {<br>
    RC3=1;               // Turn On RC3<br>
  }</p>
</div>


	
	
<div class="comment " id="comment-630">
<div class="comment_date_and_id"><span class="comm_date">13.03.11</span><span class="comm_id">#65</span></div>
<p class="comment_by">Comment by <b><a href="http://rwb/" rel="external nofollow">rwb</a></b>.</p>
<p>Yes you could experiment with it and make some adjustment to the TIMER0 counter register (TMR0) initial value for the timing.</p>
</div>


	
	

 


<h3>Leave a Comment</h3>

<h2>You must be <a href="http://www.ermicro.com/blog/wp-login.php?redirect_to=http://www.ermicro.com/blog/?p=771">logged in</a> to post a comment.</h2>


</div>
	<div id="sidebar">
		<ul>
					<li id="text-353826451" class="widget widget_text">			<h2 class="widgettitle">Search This Site</h2>
			<div class="textwidget"><!-- google search -->
<style type="text/css">
@import url(http://www.google.com/cse/api/branding.css);
</style>
<div class="cse-branding-bottom" style="background-color:#FFFFEF;color:#000000">
  <div class="cse-branding-form">
    <form action="http://www.google.com/cse" id="cse-search-box" target="_blank">
      <div>
        <input name="cx" value="partner-pub-9787882570656893:d9u549fzzoz" type="hidden">
        <input name="ie" value="ISO-8859-1" type="hidden">
        <input name="q" size="17" type="text">
        <input name="sa" value="Search" type="submit">
      </div>
    </form>
  </div>
  <div class="cse-branding-logo">
    <img src="Basic%20Servo%20Motor%20Controlling%20with%20Microchip%20PIC%20Microcontroller%20_%20ermicroblog_files/poweredby_FFFFFF.gif" alt="Google">
  </div>
  <div class="cse-branding-text">
    Custom Search
  </div>
</div>
<!-- google search end -->
</div>
		</li>
		<li id="execphp-327839551" class="widget widget_execphp">			<h2 class="widgettitle">Future Post</h2>
			<div class="execphpwidget">On the next post we will learn some of the
 usefull I2C devices available on the market that might be usefull for 
your next embedded system project. 
<p>
Therefore don't miss it, stay tune on this blog !
<br><br></p></div>
		</li>
		<li id="text-373943321" class="widget widget_text">						<div class="textwidget"><script type="text/javascript"><!--
google_ad_client = "pub-9787882570656893";
/* 160x600, created 3/8/09 */
google_ad_slot = "5493029339";
google_ad_width = 160;
google_ad_height = 600;
//-->
</script>
<script type="text/javascript" src="Basic%20Servo%20Motor%20Controlling%20with%20Microchip%20PIC%20Microcontroller%20_%20ermicroblog_files/show_ads.js">
</script><ins style="display:inline-table;border:none;height:600px;margin:0;padding:0;position:relative;visibility:visible;width:160px"><ins id="aswift_3_anchor" style="display:block;border:none;height:600px;margin:0;padding:0;position:relative;visibility:visible;width:160px"><iframe allowtransparency="true" hspace="0" marginwidth="0" marginheight="0" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){i+='.call';setTimeout(h,0)}else if(h.match){i+='.nav';w.location.replace(h)}s.log&amp;&amp;s.log.push(i)}" vspace="0" id="aswift_3" name="aswift_3" style="left: 0pt; position: absolute; top: 0pt;" scrolling="no" frameborder="0" height="600" width="160"></iframe></ins></ins></div>
		</li>
		<li id="recent-posts" class="widget widget_recent_entries">			<h2 class="widgettitle">Recent Posts</h2>
			<ul>
						<li><a href="http://www.ermicro.com/blog/?p=2104">The Line Follower Robot with Texas Instruments 16-Bit MSP430G2231 Microcontroller </a></li>
						<li><a href="http://www.ermicro.com/blog/?p=2056">Make Your Own Arduino Shield Cradle </a></li>
						<li><a href="http://www.ermicro.com/blog/?p=1971">Working with Atmel AVR Microcontroller Basic Pulse Width Modulation (PWM) Peripheral </a></li>
						<li><a href="http://www.ermicro.com/blog/?p=1940">Quick and Efficiently Wiring Your Prototype Circuit Board </a></li>
						<li><a href="http://www.ermicro.com/blog/?p=1908">The LM324 Quad Op-Amp Line Follower Robot with Pulse Width Modulation </a></li>
						<li><a href="http://www.ermicro.com/blog/?p=1900">The Year 2010 End Notes </a></li>
						<li><a href="http://www.ermicro.com/blog/?p=1846">Using Serial Peripheral Interface (SPI) with Microchip PIC18 Families Microcontroller </a></li>
						<li><a href="http://www.ermicro.com/blog/?p=1773">Integrating Wiznet W5100, WIZ811MJ network module with Atmel AVR Microcontroller </a></li>
						<li><a href="http://www.ermicro.com/blog/?p=1669">Stepping Into the 16-bit World with the Microchip 16-bit PIC24F16KA102 Family Microcontroller </a></li>
						<li><a href="http://www.ermicro.com/blog/?p=1622">Building your own Simple Laser Projector using the Microchip PIC12F683 Microcontroller </a></li>
						<li><a href="http://www.ermicro.com/blog/?p=1578">Working with the Comparator Circuit </a></li>
						<li><a href="http://www.ermicro.com/blog/?p=1549">Build Your Own Simple and Easy PICAXE Microcontroller Based Photovore Robot </a></li>
						<li><a href="http://www.ermicro.com/blog/?p=1526">Make your own Microcontroller Printed Circuit Board (PCB) using the Toner Transfer Method </a></li>
						<li><a href="http://www.ermicro.com/blog/?p=1503">The 2009 Year End Notes </a></li>
						<li><a href="http://www.ermicro.com/blog/?p=1461">PIC18 Pulse Width Modulation (PWM) DC Motor Speed Controller with the RPM Counter Project </a></li>
						</ul>
		</li>

<li id="wp-chiclets" class="widget widget_wpchiclets">
  <h2 class="widgettitle">Subscribe</h2>

  <!-- wp-chiclets: http://www.tsaiberspace.net/projects/wordpress/wp-chiclets/ -->
  <ul>
    <li><a href="http://www.ermicro.com/blog/?feed=rss2" title="Syndicate the latest posts"><img src="Basic%20Servo%20Motor%20Controlling%20with%20Microchip%20PIC%20Microcontroller%20_%20ermicroblog_files/rss.png" alt=""> Posts</a> | <a href="http://www.ermicro.com/blog/?feed=comments-rss2" title="Syndicate the latest comments"><img src="Basic%20Servo%20Motor%20Controlling%20with%20Microchip%20PIC%20Microcontroller%20_%20ermicroblog_files/rss.png" alt=""> Comments</a></li>
    <li><a href="http://fusion.google.com/add?feedurl=http://www.ermicro.com/blog/?feed=rss2" title="Add to Google"><img src="Basic%20Servo%20Motor%20Controlling%20with%20Microchip%20PIC%20Microcontroller%20_%20ermicroblog_files/add.gif" alt="Add to Google"> </a></li>
    <li><a href="http://us.rd.yahoo.com/my/atm/ermicroblog/ermicroblog/*http://add.my.yahoo.com/rss?url=http://www.ermicro.com/blog/?feed=rss2" title="Add to My Yahoo!"><img src="Basic%20Servo%20Motor%20Controlling%20with%20Microchip%20PIC%20Microcontroller%20_%20ermicroblog_files/addtomyyahoo4.gif" alt="Add to My Yahoo!"> </a></li>
    <li><a href="http://www.bloglines.com/sub/http://www.ermicro.com/blog/?feed=rss2" title="Subscribe with Bloglines"><img src="Basic%20Servo%20Motor%20Controlling%20with%20Microchip%20PIC%20Microcontroller%20_%20ermicroblog_files/sub_modern11.gif" alt="Subscribe with Bloglines"> </a></li>
    <li><a href="http://technorati.com/faves?add=http://www.ermicro.com/blog/?feed=rss2" title="Add to Technorati Favorites"><img src="Basic%20Servo%20Motor%20Controlling%20with%20Microchip%20PIC%20Microcontroller%20_%20ermicroblog_files/tech-fav-5.gif" alt="Add to Technorati Favorites"> </a></li>
    <li><a href="http://www.netvibes.com/subscribe.php?url=http://www.ermicro.com/blog/?feed=rss2" title="Add to netvibes"><img src="Basic%20Servo%20Motor%20Controlling%20with%20Microchip%20PIC%20Microcontroller%20_%20ermicroblog_files/add2netvibes.gif" alt="Add to netvibes"> </a></li>
    <!-- <li><a href="http://www.rojo.com/add-subscription?resource=http://www.ermicro.com/blog/?feed=rss2" title="Add to My Rojo"><img src="http://blog.rojo.com/RojoWideRed.gif" alt="Add to My Rojo" /> </a></li> -->
    <!-- <li><a href="http://www.newsgator.com/ngs/subscriber/subext.aspx?url=http://www.ermicro.com/blog/?feed=rss2" title="Subscribe with NewsGator"><img src="http://www.newsgator.com/images/ngsub1.gif" alt="Subscribe with NewsGator" /> </a></li> -->
    <li><a href="http://feeds.my.aol.com/add.jsp?url=http://www.ermicro.com/blog/?feed=rss2" title="Add to My AOL"><img src="Basic%20Servo%20Motor%20Controlling%20with%20Microchip%20PIC%20Microcontroller%20_%20ermicroblog_files/icon_myaol.gif" alt="Add to My AOL"> </a></li>
    <li><a href="http://www.live.com/?add=http://www.ermicro.com/blog/?feed=rss2" title="Add to Windows Live Favorites"><img src="Basic%20Servo%20Motor%20Controlling%20with%20Microchip%20PIC%20Microcontroller%20_%20ermicroblog_files/wl_add_feed.gif" alt="Add to Windows Live Favorites"> </a></li>
    <li><a href="http://my.msn.com/addtomymsn.armx?id=rss&amp;ut=http://www.ermicro.com/blog/?feed=rss2" title="Add to My MSN"><img src="Basic%20Servo%20Motor%20Controlling%20with%20Microchip%20PIC%20Microcontroller%20_%20ermicroblog_files/rss_my.gif" alt="Add to My MSN"> </a></li>
  </ul>
</li>

		<li id="execphp-376064991" class="widget widget_execphp">			<h2 class="widgettitle">Recommended Books</h2>
			<div class="execphpwidget">
<!-- Programming 8-bit PIC Microcontrollers in C -->
<iframe src="Basic%20Servo%20Motor%20Controlling%20with%20Microchip%20PIC%20Microcontroller%20_%20ermicroblog_files/cm.htm" style="width: 120px; height: 240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0"></iframe>
<br>

<!-- C Programming for Microcontrollers Featuring ATMEL -->
<iframe src="Basic%20Servo%20Motor%20Controlling%20with%20Microchip%20PIC%20Microcontroller%20_%20ermicroblog_files/cm_002.htm" style="width: 120px; height: 240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0"></iframe>
<br>

<!-- C Programming Language -->
<iframe src="Basic%20Servo%20Motor%20Controlling%20with%20Microchip%20PIC%20Microcontroller%20_%20ermicroblog_files/cm_003.htm" style="width: 120px; height: 240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0"></iframe>
<br>









































<br></div>
		</li>
		<li id="execphp-376744472" class="widget widget_execphp">			<h2 class="widgettitle">Feature Product</h2>
			<div class="execphpwidget"><br>
<a href="http://www.ermicro.com/store/index.php?main_page=product_info&amp;cPath=1_6&amp;products_id=73&amp;zenid=0to18bhgqb5kog87cnsakvmq80"><img class="alignnone size-medium wp-image-105" title="PICJazz 20PIN" src="Basic%20Servo%20Motor%20Controlling%20with%20Microchip%20PIC%20Microcontroller%20_%20ermicroblog_files/PICJazz_20PIN_01.jpg" alt="PICJazz 20PIN Board" height="120" width="170"></a><br>PICJazz 20PIN Board<br>
<br></div>
		</li>
<li id="categories-284355761" class="widget widget_categories"><h2 class="widgettitle">Categories</h2>
		<ul>
			<li class="cat-item cat-item-87"><a href="http://www.ermicro.com/blog/?cat=87" title="Blognote">Blognote</a>
</li>
	<li class="cat-item cat-item-6"><a href="http://www.ermicro.com/blog/?cat=6" title="Development and Learning Board from ermicro">Development Board News</a>
</li>
	<li class="cat-item cat-item-3"><a href="http://www.ermicro.com/blog/?cat=3" title="Electronics for Beginners">Electronics</a>
</li>
	<li class="cat-item cat-item-4"><a href="http://www.ermicro.com/blog/?cat=4" title="Microcontroller Projects">Microcontroller</a>
</li>
	<li class="cat-item cat-item-42"><a href="http://www.ermicro.com/blog/?cat=42" title="Robotics Project">Robotics</a>
</li>
	<li class="cat-item cat-item-7"><a href="http://www.ermicro.com/blog/?cat=7" title="Yet Another Tips ">Yet Another Tips</a>
</li>
		</ul>
</li>
<li id="linkcat-2" class="widget widget_links"><h2 class="widgettitle">Blogroll</h2>

	<ul class="xoxo blogroll">
<li><a href="http://www.ermicro.com/" title="ermicro shop">ermicro shop</a></li>
<li><a href="http://astore.amazon.com/ermicroblog-20" title="ermicroblog Amazon Store">ermicroblog Amazon Store</a></li>
<li><a href="http://www.youtube.com/ermicroinfo" title="ermicroblog project on YouTube">ermicroblog on YouTube</a></li>
<li><a href="http://www.metacafe.com/channels/ermicroinfo" title="ermicro video at Metacafe">ermicroblog video on Metacafe</a></li>

	</ul>
</li>

<li id="archives" class="widget widget_archive"><h2 class="widgettitle">Archives</h2>
		<ul>
			<li><a href="http://www.ermicro.com/blog/?m=201109" title="September 2011">September 2011</a></li>
	<li><a href="http://www.ermicro.com/blog/?m=201107" title="July 2011">July 2011</a></li>
	<li><a href="http://www.ermicro.com/blog/?m=201104" title="April 2011">April 2011</a></li>
	<li><a href="http://www.ermicro.com/blog/?m=201102" title="February 2011">February 2011</a></li>
	<li><a href="http://www.ermicro.com/blog/?m=201101" title="January 2011">January 2011</a></li>
	<li><a href="http://www.ermicro.com/blog/?m=201012" title="December 2010">December 2010</a></li>
	<li><a href="http://www.ermicro.com/blog/?m=201009" title="September 2010">September 2010</a></li>
	<li><a href="http://www.ermicro.com/blog/?m=201007" title="July 2010">July 2010</a></li>
	<li><a href="http://www.ermicro.com/blog/?m=201005" title="May 2010">May 2010</a></li>
	<li><a href="http://www.ermicro.com/blog/?m=201004" title="April 2010">April 2010</a></li>
	<li><a href="http://www.ermicro.com/blog/?m=201003" title="March 2010">March 2010</a></li>
	<li><a href="http://www.ermicro.com/blog/?m=201002" title="February 2010">February 2010</a></li>
	<li><a href="http://www.ermicro.com/blog/?m=201001" title="January 2010">January 2010</a></li>
	<li><a href="http://www.ermicro.com/blog/?m=200912" title="December 2009">December 2009</a></li>
	<li><a href="http://www.ermicro.com/blog/?m=200911" title="November 2009">November 2009</a></li>
	<li><a href="http://www.ermicro.com/blog/?m=200910" title="October 2009">October 2009</a></li>
	<li><a href="http://www.ermicro.com/blog/?m=200909" title="September 2009">September 2009</a></li>
	<li><a href="http://www.ermicro.com/blog/?m=200908" title="August 2009">August 2009</a></li>
	<li><a href="http://www.ermicro.com/blog/?m=200907" title="July 2009">July 2009</a></li>
	<li><a href="http://www.ermicro.com/blog/?m=200906" title="June 2009">June 2009</a></li>
	<li><a href="http://www.ermicro.com/blog/?m=200905" title="May 2009">May 2009</a></li>
	<li><a href="http://www.ermicro.com/blog/?m=200904" title="April 2009">April 2009</a></li>
	<li><a href="http://www.ermicro.com/blog/?m=200903" title="March 2009">March 2009</a></li>
	<li><a href="http://www.ermicro.com/blog/?m=200902" title="February 2009">February 2009</a></li>
	<li><a href="http://www.ermicro.com/blog/?m=200901" title="January 2009">January 2009</a></li>
	<li><a href="http://www.ermicro.com/blog/?m=200812" title="December 2008">December 2008</a></li>
	<li><a href="http://www.ermicro.com/blog/?m=200811" title="November 2008">November 2008</a></li>
		</ul>
</li>
		<li id="execphp-376744471" class="widget widget_execphp">						<div class="execphpwidget"></div>
		</li>
		<li id="text-540372401" class="widget widget_text">						<div class="textwidget"><br>
<script type="text/javascript"><!--
google_ad_client = "pub-9787882570656893";
/* 160x90, created 9/17/09 */
google_ad_slot = "7245284029";
google_ad_width = 160;
google_ad_height = 90;
//-->
</script>
<script type="text/javascript" src="Basic%20Servo%20Motor%20Controlling%20with%20Microchip%20PIC%20Microcontroller%20_%20ermicroblog_files/show_ads.js">
</script><ins style="display:inline-table;border:none;height:90px;margin:0;padding:0;position:relative;visibility:visible;width:160px"><ins id="aswift_4_anchor" style="display:block;border:none;height:90px;margin:0;padding:0;position:relative;visibility:visible;width:160px"><iframe allowtransparency="true" hspace="0" marginwidth="0" marginheight="0" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){i+='.call';setTimeout(h,0)}else if(h.match){i+='.nav';w.location.replace(h)}s.log&amp;&amp;s.log.push(i)}" vspace="0" id="aswift_4" name="aswift_4" style="left: 0pt; position: absolute; top: 0pt;" scrolling="no" frameborder="0" height="90" width="160"></iframe></ins></ins></div>
		</li>
		</ul>
	</div>

</div>
<div id="footer">
<p>Copyright © 2008-2011 By ermicro. Powered by <a href="http://wordpress.org/">Word Press</a>.</p>
</div>
</div>
 <script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script><script src="Basic%20Servo%20Motor%20Controlling%20with%20Microchip%20PIC%20Microcontroller%20_%20ermicroblog_files/ga.js" type="text/javascript"></script>
<script type="text/javascript">
try {
var pageTracker = _gat._getTracker("UA-6112509-2");
pageTracker._trackPageview();
} catch(err) {}</script>


</body></html>